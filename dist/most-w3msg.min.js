(function(global,factory){if(typeof define==="function"&&define.amd){define("most-w3msg",["exports","most"],factory)}else if(typeof exports!=="undefined"){factory(exports,require("most"))}else{var mod={exports:{}};factory(mod.exports,global.most);global.mostW3msg=mod.exports}})(this,function(exports,_most){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.toWorker=exports.fromWorker=exports.toMessagePort=exports.fromMessagePort=exports.fromEventSourceOn=exports.fromEventSource=exports.toWebSocket=exports.fromWebSocket=undefined;var defaultMessageEvent="message";function fromMessageSource(source,dispose){return fromMessageSourceEvent(defaultMessageEvent,source,dispose)}function fromMessageSourceEvent(eventName,source,dispose){return(0,_most.create)(function(add,end,error){return pipeFromSource(source,eventName,dispose,add,end,error)})}function toWebSocket(stream,socket){return pipeToSink(stream,initOpenable,send,socket)}function send(socket,msg){socket.send(msg)}function initOpenable(openable){return new Promise(function(resolve,reject){openable.addEventListener("open",resolve);openable.addEventListener("error",reject)})}function toPort(stream,sink){return pipeToSink(stream,Promise.resolve,postMessage,sink)}function postMessage(sink,msg){sink.postMessage(msg)}function pipeFromSource(source,eventName,dispose,add,end,error){if(typeof dispose!=="function"){dispose=noop}if("onopen"in source){source.addEventListener("open",onOpen)}else{onOpen()}function onOpen(){source.addEventListener("close",end);source.addEventListener("error",error);source.addEventListener(eventName,add)}return function(){if("onopen"in source){source.removeEventListener("open",add)}source.removeEventListener("close",end);source.removeEventListener("error",error);source.removeEventListener(eventName,add);return dispose()}}function pipeToSink(stream,init,send,sink){return init(sink).then(function(){return doSendMessage(stream,send,sink)})}function doSendMessage(stream,send,sink){var endSignal=(0,_most.fromPromise)(new Promise(function(resolve,reject){sink.addEventListener("close",resolve);sink.addEventListener("error",reject)}));return stream.takeUntil(endSignal).forEach(function(x){return send(sink,x)})}function noop(){}exports.fromWebSocket=fromMessageSource;exports.toWebSocket=toWebSocket;exports.fromEventSource=fromMessageSource;exports.fromEventSourceOn=fromMessageSourceEvent;exports.fromMessagePort=fromMessageSource;exports.toMessagePort=toPort;exports.fromWorker=fromMessageSource;exports.toWorker=toPort});